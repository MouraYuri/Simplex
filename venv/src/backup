def computingNonBasicReducedCost(c, AB, invB, A, n, CB):
    cBarra = []
    for w in range(n):
        cBarra.append([0])
    transposedCB = np.transpose(CB)
    teste = []
    for q in AB:
        teste.append(q)
    for y in range(n):
        for z in AB:
            if (y+1 not in teste):
                cBarra[y][0] = 0
                break
            else:
                Aj = []
                for p in range(len(AB)):
                    Aj.append([0])
                print('A{} = '.format(y+1))
                for v in range(len(AB)):
                    Aj[v][0] = A[v][y]
                print(Aj)
                ctrl = np.dot(transposedCB, invB)
                ctrl = ctrl[0]
                ctrl = np.dot(ctrl, Aj)
                ctrl = (np.subtract(c[y], ctrl))
                cBarra[y][0] = ctrl[0]

    return cBarra